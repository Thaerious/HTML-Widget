import browserify from "browserify";
import FS from "fs";
import Path from "path";
import CONSTANTS from "./constants.js";
import Logger from "@thaerious/logger";
const logger = Logger.getLogger();

function renderJS (record, outputPath, localPkg) {
    const srcPath
        = record.package === localPkg
        ? Path.join(CONSTANTS.NODE_DIST_PATH, record.name + ".js")
        : Path.join(CONSTANTS.NODE_MODULES_PATH, record.package, record.script);

    logger.channel(`very-verbose`).log(`  \\_ source ${record.package}:${srcPath}`);

    return new Promise((resolve, reject) => {
        const b = browserify({ debug: true });
        b.add(srcPath);

        for (const include of record.includes) {
            if (include.script) {
                const includePath 
                    = include.package === localPkg
                    ? Path.join(CONSTANTS.NODE_DIST_PATH, include.name + ".js")
                    : Path.join(CONSTANTS.NODE_MODULES_PATH, include.package, include.script)

                logger.channel(`very-verbose`).log(`    \\_ include ${include.package}:${includePath}`);                
                b.add(includePath);
            } else {
                logger.channel(`very-verbose`).log(`    \\_ X ${include.name}`);
            }
        }

        const rs = b.bundle();
        const stream = FS.createWriteStream(outputPath);
        stream.write(`// generated by EJSRender on ` + new Date().toLocaleString() + `\n`);

        rs.on(`error`, err => {
            if (stream?.emit) stream.emit(`end`);
            stream?.close();
            reject(err);
        });

        rs.pipe(stream);

        // wait for the write-stream to finish writing
        stream.on(`finish`, () => {
            logger.channel(`very-verbose`).log(`    \\_ destination ${outputPath}`);
            stream.close();
            resolve();
        });
    });
}

export default renderJS;
